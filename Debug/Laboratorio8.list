
Laboratorio8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0000136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000370  08000370  00001370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000374  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000374  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000109  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000076  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000055  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  000015b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000092  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000354 	.word	0x08000354

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000354 	.word	0x08000354

08000204 <main>:
.equ BUTTON_PIN, 13 // PC13

main:
	// (inciso 3)
	// inicializar el contador del boton
	LDR r2, =0
 8000204:	f04f 0200 	mov.w	r2, #0

	// SETUP

    /* habilitar reloj para GPIOA y GPIOC */
    LDR r0, =RCC_AHB1ENR
 8000208:	4826      	ldr	r0, [pc, #152]	@ (80002a4 <configurar_pa4+0x12>)
    LDR r1, [r0]
 800020a:	6801      	ldr	r1, [r0, #0]
    // GPIOA
    ORR r1, r1, #(1 << 0)
 800020c:	f041 0101 	orr.w	r1, r1, #1
    // GPIOC
    ORR r1, r1, #(1 << 2)
 8000210:	f041 0104 	orr.w	r1, r1, #4
    STR r1, [r0]
 8000214:	6001      	str	r1, [r0, #0]

    /* PC13 como entrada */
    LDR r0, =GPIOC_MODER
 8000216:	4824      	ldr	r0, [pc, #144]	@ (80002a8 <configurar_pa4+0x16>)
    LDR r1, [r0]
 8000218:	6801      	ldr	r1, [r0, #0]
    BIC r1, r1, #(0x3 << (BUTTON_PIN * 2))  // asegurarse que sea entrada
 800021a:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
    STR r1, [r0]
 800021e:	6001      	str	r1, [r0, #0]

    // PA5 como salida
    LDR r0, =GPIOA_MODER
 8000220:	4822      	ldr	r0, [pc, #136]	@ (80002ac <configurar_pa4+0x1a>)
    LDR r1, [r0]
 8000222:	6801      	ldr	r1, [r0, #0]
    BIC r1, r1, #(0x3 << (LED_PIN_PA5 * 2))   // limpiar bits 11:10
 8000224:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
    ORR r1, r1, #(0x1 << (LED_PIN_PA5 * 2))
 8000228:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
    STR r1, [r0]
 800022c:	6001      	str	r1, [r0, #0]

    // (inciso 1) configurar y encender PA$ con subrutinas
	B configurar_pa4
 800022e:	e030      	b.n	8000292 <configurar_pa4>

08000230 <loop>:

loop:
    // lee el estado del switch
    LDR r0, =GPIOC_IDR
 8000230:	481f      	ldr	r0, [pc, #124]	@ (80002b0 <configurar_pa4+0x1e>)
    LDR r1, [r0]
 8000232:	6801      	ldr	r1, [r0, #0]
    LSR r1, r1, #BUTTON_PIN
 8000234:	ea4f 3151 	mov.w	r1, r1, lsr #13
    AND r1, r1, #1
 8000238:	f001 0101 	and.w	r1, r1, #1

	// if SWITCH == LOW
    CMP r1, #0
 800023c:	2900      	cmp	r1, #0
    // (inciso 3) aumentar el contador de pulsaciones
    BEQ button_count
 800023e:	d00b      	beq.n	8000258 <button_count>

08000240 <button_released>:

button_released:
    // PA5 apagado por defecto
    LDR r0, =GPIOA_ODR
 8000240:	481c      	ldr	r0, [pc, #112]	@ (80002b4 <configurar_pa4+0x22>)
    LDR r1, [r0]
 8000242:	6801      	ldr	r1, [r0, #0]
    BIC r1, r1, #(1 << LED_PIN_PA5)
 8000244:	f021 0120 	bic.w	r1, r1, #32
    STR r1, [r0]
 8000248:	6001      	str	r1, [r0, #0]
    B loop
 800024a:	e7f1      	b.n	8000230 <loop>

0800024c <button_pressed>:

button_pressed:
    // encender PA5
    LDR r0, =GPIOA_ODR
 800024c:	4819      	ldr	r0, [pc, #100]	@ (80002b4 <configurar_pa4+0x22>)
    LDR r1, [r0]
 800024e:	6801      	ldr	r1, [r0, #0]
    ORR r1, r1, #(1 << LED_PIN_PA5)
 8000250:	f041 0120 	orr.w	r1, r1, #32
    STR r1, [r0]
 8000254:	6001      	str	r1, [r0, #0]
    B loop
 8000256:	e7eb      	b.n	8000230 <loop>

08000258 <button_count>:


button_count:
    ADD R2, R2, #1
 8000258:	f102 0201 	add.w	r2, r2, #1
    // (inciso 2) encender un led cuando se pulse el boton
    B button_pressed
 800025c:	e7f6      	b.n	800024c <button_pressed>

0800025e <shifts_on_r0>:

// (inciso 5) shifts
shifts_on_r0:
	// con el valor actual de R0
	LSL R0, R0, #3 // izquierda
 800025e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	ASR R0, R0, #3 // derecha
 8000262:	ea4f 00e0 	mov.w	r0, r0, asr #3
	B subrutina_aritmetica
 8000266:	e7ff      	b.n	8000268 <subrutina_aritmetica>

08000268 <subrutina_aritmetica>:

// (inciso 4) operaciones aritmeticas
subrutina_aritmetica:
    LDR R3, =10
 8000268:	f04f 030a 	mov.w	r3, #10
    LDR R4, =5
 800026c:	f04f 0405 	mov.w	r4, #5
    LDR R5, =3
 8000270:	f04f 0503 	mov.w	r5, #3
    LDR R6, =4
 8000274:	f04f 0604 	mov.w	r6, #4

    // R9 = (R1 + R2) - (R3 * 4)
    ADD R7, R3, R4
 8000278:	eb03 0704 	add.w	r7, r3, r4
    MUL R8, R5, R6
 800027c:	fb05 f806 	mul.w	r8, r5, r6
    SUB R9, R7, R8
 8000280:	eba7 0908 	sub.w	r9, r7, r8
	B loop
 8000284:	e7d4      	b.n	8000230 <loop>

08000286 <encender_pa4>:

encender_pa4:
	// (inciso 1) configurar pa4 con subrutinas
	LDR r0, =GPIOA_ODR
 8000286:	480b      	ldr	r0, [pc, #44]	@ (80002b4 <configurar_pa4+0x22>)
    LDR r1, [r0]
 8000288:	6801      	ldr	r1, [r0, #0]
    ORR r1, r1, #(1 << LED_PIN_PA4)
 800028a:	f041 0110 	orr.w	r1, r1, #16
    STR r1, [r0]
 800028e:	6001      	str	r1, [r0, #0]
    // (inciso 5) link a subrutina del inciso 5
    B shifts_on_r0
 8000290:	e7e5      	b.n	800025e <shifts_on_r0>

08000292 <configurar_pa4>:

configurar_pa4:
	// (inciso 1) encender pa4 con subrutinas
	LDR r0, =GPIOA_MODER
 8000292:	4806      	ldr	r0, [pc, #24]	@ (80002ac <configurar_pa4+0x1a>)
    LDR r1, [r0]
 8000294:	6801      	ldr	r1, [r0, #0]
    BIC r1, r1, #(0x3 << (LED_PIN_PA4 * 2))   // limpiar bits 11:10
 8000296:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
    ORR r1, r1, #(0x1 << (LED_PIN_PA4 * 2))   // establecer 01 (salida)
 800029a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
    STR r1, [r0]
 800029e:	6001      	str	r1, [r0, #0]
    B encender_pa4
 80002a0:	e7f1      	b.n	8000286 <encender_pa4>
 80002a2:	0000      	.short	0x0000
    LDR r0, =RCC_AHB1ENR
 80002a4:	40023830 	.word	0x40023830
    LDR r0, =GPIOC_MODER
 80002a8:	40020800 	.word	0x40020800
    LDR r0, =GPIOA_MODER
 80002ac:	40020000 	.word	0x40020000
    LDR r0, =GPIOC_IDR
 80002b0:	40020810 	.word	0x40020810
    LDR r0, =GPIOA_ODR
 80002b4:	40020014 	.word	0x40020014

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	@ (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff8b 	bl	8000204 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	@ (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	@ (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	@ (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	@ (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
